** Source code for figures in paper

For reproducibility purposes a [[file:Makefile]] has been included. Typing
the following commands should download/clone this repo, then re-create
the figures from the paper.

#+BEGIN_SRC shell-script
git clone https://github.com/tdhock/changepoint-data-structure
cd changepoint-data-structure
rm -f *.rds *.csv
make
#+END_SRC

Result figures will be compiled into [[file:figures.pdf][figures.pdf]] which has
corresponding source file [[file:figures.tex]].

- [[file:figure-three-iterations.R][Figure 1]]: demonstration of iterations 2 and 3 of proposed algorithm.
- [[file:figure-loss-small-evals.R][Figure 2]]: empirical number of iterations.
- [[file:figure-fullpath-db-binseg.R][Figure 3 left]]: empirical timings for linear/quadratic algorithms,
  [[file:figure-fullpath-grid-timing.R][right]]: empirical timings for linear/quadratic/grid search.
- [[file:figure-binseg-quadratic-rigaill.R][Figure 4]]: empirical timings in different simulations.
- [[file:figure-chipseq-cv.R][Figure 5]]: accuracy in 4-fold cross-validation experiments.
- [[file:figure-crops-compare.R][Figure 6]]: timing comparison with CROPS and PDPA.
- Figure 7: [[file:figure-kmeans-simple.R][Kmeans]], [[file:figure-pca-simple.R][PCA]], [[file:figure-regression-simple.R][Regression]].

Note that each figure script linked above depends on csv/rds data
files which are pre-computed/cached by other R scripts (see details
below or in [[file:Makefile][Makefile]]).  To redo all computations from scratch you can
delete these files via "rm *.csv *.rds" and then re-run "make".

Also note there is a [[file:packages.R]] script which takes care of
installing/attaching packages, and is run at the start of each of
these R scripts.

** TODOs

Efficient data structure for computing Optimal Partitioning models.

[[file:figure-four-models.R]] and [[file:figure-three-iterations-new.R]] have some
ideas for a figure for this.

Basic structure is a binary search tree, probably best to implement on
top of a C++ STL map. 

See for related work http://wcipeg.com/wiki/Convex_hull_trick#Fully_dynamic_variant

Assume data set of size d.

Assume we have a solver OP(lambda) -> segments, loss. O(d log d)

Let N be the number of elements in the data structure.

Public Methods
- getModelForPenalty(lambda): find l1<=lambda<l2 in O(log N). If
  l1==lambda then return stored segments for l1 in O(1). If stored
  segments2=segments1-1 then return segments in O(1). Otherwise run
  OP(lambda) and store result for lambda in O(1).

Private Methods
- insertModel(lambda, segments, loss): O(log N) -- useful if we have a
  bunch of pre-computed models on disk.

Application: compute the full path on the benchmark data, see if the
min error that we get from the target interval algo is the same as the
actual min error. Analyze computation time: using data structure we
should be log-linear rather than quadratic.

Application: compare O(N^2) Segment Neighborhood algo (jointseg::Fpsn)
with our algo. 1-we can do parallel eval with OP. 2- only 73% of SN
models are actually computable via OP. 3-modelSelection code is linear
time.

Parallel full path algo.

** 14 Apr 2021
[[file:figure-crops-compare-data.R]] makes
[[file:figure-crops-compare-data.rds]]

[[file:figure-crops-compare.R]] makes

[[file:figure-crops-compare.png]]

??? these files are old...

[[file:binseg.only.timings.R]]

[[file:tikzTest.R]]

[[file:figure-loss-changepoint.R]]

** 13 Apr 2021

[[file:figure-regression-simple-data.R]] computes [[file:figure-regression-simple-data.csv]]

[[file:figure-regression-simple.R]] makes

[[file:figure-regression-simple-loss.png]]

[[file:figure-regression-simple-loss-selected.png]]

[[file:figure-regression-simple-size.png]]

[[file:figure-regression-simple.png]]

[[file:figure-pca-simple-data.R]] computes [[file:figure-pca-simple-data.csv]]

[[file:figure-pca-simple.R]] makes

[[file:figure-pca-simple-loss.png]]

[[file:figure-pca-simple-size.png]]

[[file:figure-pca-simple.png]]

[[file:figure-kmeans-simple-data.R]] makes [[file:figure-kmeans-simple-data.csv]]

[[file:figure-kmeans-simple.R]] makes

[[file:figure-kmeans-simple-loss.png]]

[[file:figure-kmeans-simple-size.png]]

** 21 Apr 2020

[[http://adv-r.had.co.nz/Rcpp.html][Advanced R chapter on Rcpp]] shows the following example of an exported
Rcpp function that returns a C++ std::map,

#+BEGIN_SRC c++
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
std::map<double, int> tableC(NumericVector x) {
  std::map<double, int> counts;

  int n = x.size();
  for (int i = 0; i < n; i++) {
    counts[x[i]]++;
  }

  return counts;
}
#+END_SRC

but what is returned to R in this case? 

[[https://cloud.r-project.org/web/packages/Rcpp/vignettes/Rcpp-modules.pdf][Rcpp modules vignette]] explains how to expose a C++ class/methods to R
(implemented internally using an external pointer to an instance of
the class). Get started via 

#+BEGIN_SRC R
Rcpp::Rcpp.package.skeleton("testmod", module=TRUE)
#+END_SRC

** 27 Mar 2020
[[file:figure-three-iterations-new.R]] makes
[[file:figure-three-iterations-new.tex]] TODO highlight sure/unsure
regions and stuff that is stored by algo. see also [[file:figure-four-models.R]]
** 11 Sep 2019
- [[file:binseg.timing.R]] simulations.
- [[file:fullpath.db.binseg.R]] binseg on loss values from simulated and real data.
- [[file:figure-fullpath-db-binseg.R]] makes

[[file:figure-fullpath-db-binseg.png]]

** 22 May 2019

[[file:figure-chipseq-cv.R]] makes

[[file:figure-chipseq-cv-diff.png]]

** 10 May 2019
[[file:figure-fullpath-grid-timing.R]] makes
[[file:figure-fullpath-grid-timing.png]]
** 3 May 2019

[[file:figure-fullpath-db-timing.R]] makes

[[file:figure-fullpath-db-timing.png]]

[[file:figure-loss-small-evals.R]]

[[file:figure-loss-small-evals.tex]] and [[file:figures.pdf]]

** 6 Feb 2019
[[file:no.intermediates.selected.R]] exhibits a set of valid
loss/complexity values for which no intermediates are selected -- how
many pops does this cause?

** 4 Feb 2019

[[file:loss.small.R]] computes full path of loss values for all 13,000+
neuroblastoma data sets with less than 1000 data points.

[[file:figure-loss-small.R]] visualizes the corresponding model selection
functions. [[http://bl.ocks.org/tdhock/raw/4a48f4d12fcfec9b87b6d366133c2122/][viz]]

[[file:figure-loss-small.png]]

[[file:figure-loss-small-data.R]] also shows the data sets and
segmentation models. [[http://bl.ocks.org/tdhock/raw/182de81306b231384af31490a7c5b908/][viz]]

